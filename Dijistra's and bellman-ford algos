#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <limits>
#include <chrono>

using namespace std;
using namespace std::chrono;

const int INF = numeric_limits<int>::max();

struct Edge {
    int to, weight;
};

void readGraph(const string& filePath, vector<vector<Edge>>& graph, int& n) {
    ifstream file(filePath);
    int m;
    file >> n >> m;
    graph.resize(n);
    for (int i = 0; i < m; ++i) {
        int u, v, w;
        file >> u >> v >> w;
        graph[u].push_back({v, w});
    }
}

vector<int> dijkstra(const vector<vector<Edge>>& graph, int startNode) {
    int n = graph.size();
    vector<int> distances(n, INF);
    distances[startNode] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, startNode});

    while (!pq.empty()) {
        int currentDistance = pq.top().first;
        int currentNode = pq.top().second;
        pq.pop();

        if (currentDistance > distances[currentNode])
            continue;

        for (const auto& edge : graph[currentNode]) {
            int neighbor = edge.to;
            int weight = edge.weight;
            int distance = currentDistance + weight;

            if (distance < distances[neighbor]) {
                distances[neighbor] = distance;
                pq.push({distance, neighbor});
            }
        }
    }

    return distances;
}

vector<int> bellmanFord(const vector<vector<Edge>>& graph, int startNode) {
    int n = graph.size();
    vector<int> distances(n, INF);
    distances[startNode] = 0;

    for (int i = 0; i < n - 1; ++i) {
        for (int u = 0; u < n; ++u) {
            for (const auto& edge : graph[u]) {
                int v = edge.to;
                int weight = edge.weight;
                if (distances[u] != INF && distances[u] + weight < distances[v]) {
                    distances[v] = distances[u] + weight;
                }
            }
        }
    }

    // Check for negative-weight cycles
    for (int u = 0; u < n; ++u) {
        for (const auto& edge : graph[u]) {
            int v = edge.to;
            int weight = edge.weight;
            if (distances[u] != INF && distances[u] + weight < distances[v]) {
                throw runtime_error("Graph contains a negative-weight cycle");
            }
        }
    }

    return distances;
}

void compareAlgorithms(const string& filePath, int startNode = 0) {
    vector<vector<Edge>> graph;
    int n;
    readGraph(filePath, graph, n);

    auto start = high_resolution_clock::now();
    vector<int> dijkstraDistances = dijkstra(graph, startNode);
    auto end = high_resolution_clock::now();
    auto dijkstraTime = duration_cast<microseconds>(end - start).count();

    start = high_resolution_clock::now();
    vector<int> bellmanFordDistances;
    try {
        bellmanFordDistances = bellmanFord(graph, startNode);
    } catch (const runtime_error& e) {
        cerr << e.what() << endl;
        return;
    }
    end = high_resolution_clock::now();
    auto bellmanFordTime = duration_cast<microseconds>(end - start).count();

    cout << "Dijkstra's Algorithm:" << endl;
    cout << "Execution Time: " << dijkstraTime << " microseconds" << endl;
    cout << "Distances: ";
    for (int distance : dijkstraDistances) {
        cout << distance << " ";
    }
    cout << endl;

    cout << "Bellman-Ford Algorithm:" << endl;
    cout << "Execution Time: " << bellmanFordTime << " microseconds" << endl;
    cout << "Distances: ";
    for (int distance : bellmanFordDistances) {
        cout << distance << " ";
    }
    cout << endl;
}

int main() {
    string filePath = "graph.txt";  // Replace with your file path
    compareAlgorithms(filePath);
    return 0;
}
